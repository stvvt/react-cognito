{"version":3,"sources":["config.ts","auth/UserManager.ts","AuthContext.tsx","AuthStatus.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["config","origin","process","authority","clientId","userPoolId","userManager","UserManager","redirect_uri","scope","silent_redirect_uri","automaticSilentRenew","loadUserInfo","post_logout_redirect_uri","response_type","userStore","WebStorageStateStore","store","window","localStorage","client_id","metadata","AuthContext","React","createContext","AuthContextProvider","children","useState","user","setUser","useEffect","pathParts","location","pathname","split","lastPathPart","length","a","signinRedirectCallback","replace","signinSilentCallback","signoutRedirectCallback","getUser","u","Provider","value","AuthStatus","useContext","profile","email","email_verified","src","picture","alt","name","identities","providerName","JSON","stringify","onClick","signoutRedirect","signinRedirect","App","className","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e25402cf.chunk.js","sourcesContent":["import 'dotenv';\n\nconst config = {\n  origin: process.env.REACT_APP_ORIGIN || window.location.origin,\n  authority: process.env.REACT_APP_AUTHORITY || 'https://reactapp.auth.eu-central-1.amazoncognito.com',\n  clientId: process.env.REACT_APP_CLIENT_ID || '7s7uifbd9p5rds9van1dtv6hmo',\n  userPoolId: process.env.REACT_APP_USER_POOL_ID || 'eu-central-1_uv19uFqzy',\n};\n\nexport default config;\n","import { UserManager, WebStorageStateStore } from 'oidc-client';\nimport config from '../config';\n\nconst userManager = new UserManager({\n  redirect_uri: `${config.origin}/callback`,\n  scope: 'email openid profile',\n  silent_redirect_uri: `${config.origin}/silent_callback`,\n  // popup_redirect_uri: `${config.origin}/authentication/popup_callback`,\n  automaticSilentRenew: true,\n  loadUserInfo: true,\n  post_logout_redirect_uri: config.origin,\n  // response_type: 'id_token token',\n  response_type: 'code',\n  userStore: new WebStorageStateStore({ store: window.localStorage }),\n  client_id: config.clientId,\n  authority: config.authority,\n  metadata: {\n    \"authorization_endpoint\": `${config.authority}/oauth2/authorize`,\n    \"id_token_signing_alg_values_supported\": [\"RS256\"],\n    \"issuer\": `https://cognito-idp.eu-central-1.amazonaws.com/${config.userPoolId}`,\n    \"jwks_uri\": `https://cognito-idp.eu-central-1.amazonaws.com/${config.userPoolId}/.well-known/jwks.json`,\n    \"response_types_supported\": [\"code\", \"token\"],\n    \"scopes_supported\": [\"openid\", \"email\", \"phone\", \"profile\"],\n    \"subject_types_supported\": [\"public\"],\n    \"token_endpoint\": `${config.authority}/oauth2/token`,\n    \"token_endpoint_auth_methods_supported\": [\"client_secret_basic\", \"client_secret_post\"],\n    \"userinfo_endpoint\": `${config.authority}/oauth2/userInfo`,\n    \"end_session_endpoint\": `${config.authority}/logout?client_id=${config.clientId}&logout_uri=${config.origin}/logout`,\n  },\n});\n\nexport default userManager;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { User } from 'oidc-client';\nimport config from './config';\nimport userManager from './auth/UserManager';\n\ninterface AuthContextProps {\n  user?: User | null;\n}\n\nexport const AuthContext = React.createContext<AuthContextProps>({});\n\nconst AuthContextProvider: React.FC = ({ children }) => {\n  const [user, setUser] = useState<User | null>();\n\n  useEffect(() => {\n    const pathParts = window.location.pathname.split('/');\n    const lastPathPart = pathParts[pathParts.length - 1];\n    (async () => {\n      switch (lastPathPart) {\n        case 'callback':\n          await userManager.signinRedirectCallback();\n          window.location.replace(config.origin);\n          return;\n        case 'silent_callback':\n          await userManager.signinSilentCallback();\n          return;\n        case 'logout':\n          await userManager.signoutRedirectCallback();\n          window.location.replace(config.origin);\n          return;\n      }\n      const u = await userManager.getUser();\n      setUser(u);\n    })();\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ user }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport default AuthContextProvider;","import React, { } from 'react';\nimport { useAuth } from './AuthContext';\nimport userManager from './auth/UserManager';\n\nconst AuthStatus: React.FC = () => {\n  const { user } = useAuth();\n\n  const handleLogout = () => {\n    userManager.signoutRedirect();\n  };\n\n  const handleLogin = () => {\n    userManager.signinRedirect();\n  };\n\n  const handleSignup = () => {\n    userManager.signinRedirect();\n  };\n\n  if (typeof user === 'undefined') {\n    return <p>Loading ...</p>\n  }\n\n  if (user) {\n    return (<>\n      <p>\n        Logged in as {user.profile.email} ({user.profile.email_verified ? '+' : '-'})\n      </p>\n      <img src={user.profile.picture} alt=\"Profile avatar\" />\n      <h1>Wellcome, {user.profile.name}</h1>\n      <p>from {user.profile.identities[0].providerName}</p>\n      <hr />\n      <pre>\n        {JSON.stringify(user, null, '  ')}\n      </pre>\n      <p>\n        <button onClick={handleLogout}>Logout</button>\n      </p>\n    </>);\n  }\n\n  return (<>\n    <p>You're not logged in.</p>\n    <p>\n      <button onClick={handleSignup}>Signup</button>\n      <button onClick={handleLogin}>Login</button>\n    </p>\n  </>);\n};\n\nexport default AuthStatus;\n","import React from 'react';\nimport AuthContextProvider from './AuthContext';\nimport AuthStatus from './AuthStatus';\n\nfunction App() {\n  return (\n    <AuthContextProvider>\n      <div className=\"App\">\n        <AuthStatus />\n      </div>\n    </AuthContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}